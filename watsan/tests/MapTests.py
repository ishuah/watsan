from django.test import TestCase, client
from django.contrib.auth.models import User, Group, Permission, ContentType
from django.contrib.gis.geos.geometry import GEOSGeometry
from django.core.exceptions import ValidationError
from watsan.models import *
import base_map
import ast
import json
from django.core.urlresolvers import reverse 
# from selenium import webdriver
# from selenium.webdriver.common.keys import Keys
# from selenium.selenium import selenium 

class MapTests(TestCase):
	def setUp(self):
		self.user = User.objects.create_user('user', 'email@email.com', 'password')
		self.privateUser = User.objects.create_user('privateUser', 'email@email.com', 'password')
		self.adminUser = User.objects.create_superuser('admin', 'email@email.com', 'password')
		self.publicGroup = Group.objects.create(name="Public")
		self.privateGroup = Group.objects.create(name="Private")
		self.privateUser.groups.add(self.privateGroup)
		self.project = Project.objects.create(user=self.user)
		self.siteObject = Site.objects.create(user=self.user,name="site test", saved=False)

		self.village = Village.objects.create(name='Smart Village')
		self.village._shape.add(base_map.models.Polygon(shape="POLYGON ((36.7929546000000016 -1.3096953000000000, 36.7930257000000012 -1.3100297000000001, 36.7930852000000002 -1.3103494000000000, 36.7931658999999982 -1.3109249000000001, 36.7932218999999989 -1.3110617000000000, 36.7933108000000004 -1.3111714999999999, 36.7933695999999983 -1.3112866000000001, 36.7933146000000022 -1.3114843000000000, 36.7933049000000025 -1.3115844999999999, 36.7933080999999973 -1.3117350000000001, 36.7933570000000003 -1.3121160999999999, 36.7934551999999968 -1.3122575999999999, 36.7935007000000027 -1.3123842999999999, 36.7937250000000020 -1.3124357000000000, 36.7938783000000029 -1.3126393999999999, 36.7938825000000023 -1.3127249000000001, 36.7938641000000004 -1.3128386999999999, 36.7937919000000022 -1.3130480000000000, 36.7938072999999974 -1.3131126000000000, 36.7938983000000022 -1.3131763000000001, 36.7940084999999968 -1.3132177000000000, 36.7942145999999966 -1.3133877000000000, 36.7942941000000019 -1.3134949000000000, 36.7943449999999999 -1.3135692999999999, 36.7944344000000001 -1.3136524000000001, 36.7945415000000011 -1.3137441999999999, 36.7946550999999999 -1.3138472000000001, 36.7947922999999975 -1.3140008000000001, 36.7948789000000005 -1.3140478000000000, 36.7950012000000015 -1.3140529000000001, 36.7951271000000020 -1.3140486000000000, 36.7951965000000030 -1.3140143000000000, 36.7952693000000011 -1.3140204000000000, 36.7953907999999998 -1.3141278000000001, 36.7954664000000022 -1.3142347000000001, 36.7955266000000023 -1.3143213000000000, 36.7956076999999979 -1.3144058999999999, 36.7956799000000032 -1.3145336000000001, 36.7956774000000024 -1.3146585000000000, 36.7956391000000025 -1.3147526000000000, 36.7957062999999991 -1.3148264999999999, 36.7957663999999980 -1.3149284999999999, 36.7957962999999992 -1.3150166999999999, 36.7958641999999969 -1.3151138000000000, 36.7960528999999994 -1.3151866000000001, 36.7961556999999999 -1.3152467999999999, 36.7962695000000011 -1.3154243999999999, 36.7965176000000014 -1.3155987000000000, 36.7968170999999984 -1.3157542000000000, 36.7969975999999974 -1.3158330000000000, 36.7970607000000030 -1.3158638000000000, 36.7971925000000013 -1.3157896000000000, 36.7973483000000030 -1.3156464000000001, 36.7973911999999999 -1.3154815000000000, 36.7974158000000031 -1.3153134000000000, 36.7973840000000010 -1.3151501999999999, 36.7974436000000011 -1.3149291000000001, 36.7975329000000002 -1.3147508000000001, 36.7976134999999971 -1.3145780000000000, 36.7976358000000019 -1.3144380000000000, 36.7975868999999989 -1.3142404999999999, 36.7975512000000009 -1.3140315000000000, 36.7975844999999993 -1.3138768999999999, 36.7974759000000020 -1.3137627000000001, 36.7973513999999966 -1.3136322000000000, 36.7971379000000027 -1.3133778000000000, 36.7971252999999976 -1.3132127000000000, 36.7972247000000010 -1.3132067000000001, 36.7974080999999984 -1.3131982000000000, 36.7976172999999989 -1.3131607999999999, 36.7977726000000018 -1.3131837000000000, 36.7978779000000031 -1.3131265999999999, 36.7979635000000016 -1.3130537000000000, 36.7981558999999976 -1.3129153000000000, 36.7982997000000012 -1.3128143999999999, 36.7984185999999980 -1.3128029000000001, 36.7985544000000004 -1.3126438000000000, 36.7986434000000031 -1.3124984000000000, 36.7986977999999993 -1.3124100000000001, 36.7987524999999991 -1.3123191999999999, 36.7988052999999979 -1.3122172000000001, 36.7988542000000010 -1.3121198999999999, 36.7988501999999968 -1.3120137999999999, 36.7989103000000028 -1.3118771000000000, 36.7989335999999980 -1.3118076999999999, 36.7989784999999969 -1.3117479999999999, 36.7983181999999971 -1.3114185000000000, 36.7978038999999981 -1.3111283000000000, 36.7971561000000023 -1.3108225000000000, 36.7965735000000009 -1.3105007000000000, 36.7958775000000031 -1.3101642000000000, 36.7953978000000035 -1.3099204000000000, 36.7949273999999988 -1.3096866000000000, 36.7947786000000008 -1.3096771000000000, 36.7940727000000010 -1.3094452000000001, 36.7935815000000019 -1.3093813000000001, 36.7929808000000023 -1.3093866000000001, 36.7929546000000016 -1.3096953000000000))"))
		self.village.save()

		content_type = ContentType.objects.get_for_model(Organization)
		manage_perm = Permission.objects.get(content_type=content_type, codename='access_watsan')
		self.user.save()
		self.user.user_permissions.add(manage_perm)

	def tearDown(self):
		Group.objects.all().delete()
		User.objects.all().delete()

	def test_as_user_I_have_access_watsan_permission(self):
		self.assertTrue(self.user.has_perm('watsan.access_watsan')) 

	def test_as_user_I_want_to_view_map(self):
		self.client.login(username='user', password='password')	
		resp = self.client.get('/watsan/map/')
		self.assertEqual(resp.status_code, 200)

	def test_as_user_I_want_to_view_dashboard(self):
		self.client.login(username='user', password='password')
		resp = self.client.get('/watsan/dashboard/')
		self.assertEqual(resp.status_code, 200)

	def test_as_user_I_want_to_check_site_placement(self):
		self.client.login(username='user', password='password')
		resp = self.client.post('/watsan/map/check_site/', { "point": "POINT(36.78224802017212 -1.3160764046244287)" })
		self.assertEqual(resp.status_code, 200)

	def test_as_user_I_want_to_save_a_site(self):
		self.client.login(username='user', password='password')
		resp = self.client.post('/watsan/map/site/save/', {"coords":"POINT(36.78224802017212 -1.3160764046244287)", "color": "blue" , "name":"Test Site", "projectId": self.project.id })
		self.assertEqual(resp.status_code, 201)

	def test_as_user_I_want_to_edit_a_site(self):
		self.client.login(username='user', password='password')
		resp = self.client.post('/watsan/map/site/edit/', {"id": self.siteObject.id, "name": "site test edit"})
		self.assertEqual(resp.status_code, 201)

	def test_as_user_I_want_to_delete_a_site(self):
		self.client.login(username='user', password='password')
		resp = self.client.post('/watsan/map/site/delete/', { "id": self.siteObject.id })
		self.assertEqual(resp.status_code, 200)

	def test_as_user_I_want_my_site_to_have_a_color(self):
		self.client.login(username='user', password='password')
		resp = self.client.post('/watsan/map/site/save/', {"coords":"POINT(36.78224802017212 -1.3160764046244287)", "color": "blue" , "name":"Test Site", "projectId": self.project.id })
		data = json.loads(resp.content)
		site = Site.objects.get(pk=data['siteId'])
		self.assertIsNotNone(site.color)